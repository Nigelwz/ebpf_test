/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __KPROBE_BPF_SKEL_H__
#define __KPROBE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct kprobe_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *heap;
		struct bpf_map *rb;
		struct bpf_map *rodata;
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *trace_open;
	} progs;
	struct {
		struct bpf_link *trace_open;
	} links;
	struct kprobe_bpf__rodata {
	} *rodata;
	struct kprobe_bpf__rodata_str1_1 {
	} *rodata_str1_1;

#ifdef __cplusplus
	static inline struct kprobe_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct kprobe_bpf *open_and_load();
	static inline int load(struct kprobe_bpf *skel);
	static inline int attach(struct kprobe_bpf *skel);
	static inline void detach(struct kprobe_bpf *skel);
	static inline void destroy(struct kprobe_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
kprobe_bpf__destroy(struct kprobe_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
kprobe_bpf__create_skeleton(struct kprobe_bpf *obj);

static inline struct kprobe_bpf *
kprobe_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct kprobe_bpf *obj;
	int err;

	obj = (struct kprobe_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = kprobe_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	kprobe_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct kprobe_bpf *
kprobe_bpf__open(void)
{
	return kprobe_bpf__open_opts(NULL);
}

static inline int
kprobe_bpf__load(struct kprobe_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct kprobe_bpf *
kprobe_bpf__open_and_load(void)
{
	struct kprobe_bpf *obj;
	int err;

	obj = kprobe_bpf__open();
	if (!obj)
		return NULL;
	err = kprobe_bpf__load(obj);
	if (err) {
		kprobe_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
kprobe_bpf__attach(struct kprobe_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
kprobe_bpf__detach(struct kprobe_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *kprobe_bpf__elf_bytes(size_t *sz);

static inline int
kprobe_bpf__create_skeleton(struct kprobe_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "kprobe_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 4;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "heap";
	s->maps[0].map = &obj->maps.heap;

	s->maps[1].name = "rb";
	s->maps[1].map = &obj->maps.rb;

	s->maps[2].name = "kprobe_b.rodata";
	s->maps[2].map = &obj->maps.rodata;
	s->maps[2].mmaped = (void **)&obj->rodata;

	s->maps[3].name = ".rodata.str1.1";
	s->maps[3].map = &obj->maps.rodata_str1_1;
	s->maps[3].mmaped = (void **)&obj->rodata_str1_1;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "trace_open";
	s->progs[0].prog = &obj->progs.trace_open;
	s->progs[0].link = &obj->links.trace_open;

	s->data = (void *)kprobe_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *kprobe_bpf__elf_bytes(size_t *sz)
{
	*sz = 4504;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd8\x0d\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0f\0\
\x0e\0\x79\x16\x68\0\0\0\0\0\x79\x17\x70\0\0\0\0\0\xb7\x09\0\0\0\0\0\0\x63\x9a\
\xfc\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x08\0\0\0\0\0\0\x55\x08\x05\0\0\
\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x0e\0\0\0\x85\0\0\0\x06\
\0\0\0\x05\0\x20\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x08\0\0\
\0\0\0\0\xbf\x81\0\0\0\0\0\0\x07\x01\0\0\x04\0\0\0\xb7\x02\0\0\0\x02\0\0\xbf\
\x63\0\0\0\0\0\0\x85\0\0\0\x2d\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbf\
\x82\0\0\0\0\0\0\xb7\x03\0\0\x04\x02\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x82\0\0\
\0\x73\x9a\xfa\xff\0\0\0\0\xb7\x01\0\0\x73\x27\0\0\x6b\x1a\xf8\xff\0\0\0\0\x18\
\x01\0\0\x68\x6e\x61\x6d\0\0\0\0\x65\x3d\x27\x25\x7b\x1a\xf0\xff\0\0\0\0\x18\
\x01\0\0\x25\x64\x27\x20\0\0\0\0\x40\x70\x61\x74\x7b\x1a\xe8\xff\0\0\0\0\x18\
\x01\0\0\x40\x64\x69\x72\0\0\0\0\x66\x64\x3d\x27\x7b\x1a\xe0\xff\0\0\0\0\xbf\
\xa1\0\0\0\0\0\0\x07\x01\0\0\xe0\xff\xff\xff\xb7\x02\0\0\x1b\0\0\0\xbf\x73\0\0\
\0\0\0\0\xbf\x64\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x62\x70\x66\x20\x6d\x61\x70\x20\x66\x61\x69\x6c\x0a\0\x40\x64\x69\x72\x66\
\x64\x3d\x27\x25\x64\x27\x20\x40\x70\x61\x74\x68\x6e\x61\x6d\x65\x3d\x27\x25\
\x73\x27\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x88\x03\0\0\x88\x03\0\0\x03\x03\0\0\
\0\0\0\0\x04\0\0\x04\x20\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\
\x40\0\0\0\x12\0\0\0\x08\0\0\0\x80\0\0\0\x16\0\0\0\x09\0\0\0\xc0\0\0\0\0\0\0\0\
\0\0\0\x02\x04\0\0\0\x1c\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\
\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x06\0\0\0\x20\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\0\0\0\0\0\0\0\0\x02\x07\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x34\0\0\0\
\x02\0\0\x04\x04\x02\0\0\x3a\0\0\0\x03\0\0\0\0\0\0\0\x3e\0\0\0\x0c\0\0\0\x20\0\
\0\0\x48\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\
\0\0\x05\0\0\0\0\x02\0\0\x4d\0\0\0\0\0\0\x0e\x01\0\0\0\x01\0\0\0\0\0\0\0\x02\0\
\0\x04\x10\0\0\0\x01\0\0\0\x0f\0\0\0\0\0\0\0\x06\0\0\0\x11\0\0\0\x40\0\0\0\0\0\
\0\0\0\0\0\x02\x10\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x1b\0\0\
\0\0\0\0\0\0\0\0\x02\x12\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\0\
\0\x04\0\x52\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x15\0\0\0\
\x55\0\0\0\x15\0\0\x04\xa8\0\0\0\x5d\0\0\0\x16\0\0\0\0\0\0\0\x61\0\0\0\x16\0\0\
\0\x40\0\0\0\x65\0\0\0\x16\0\0\0\x80\0\0\0\x69\0\0\0\x16\0\0\0\xc0\0\0\0\x6d\0\
\0\0\x16\0\0\0\0\x01\0\0\x70\0\0\0\x16\0\0\0\x40\x01\0\0\x73\0\0\0\x16\0\0\0\
\x80\x01\0\0\x77\0\0\0\x16\0\0\0\xc0\x01\0\0\x7b\0\0\0\x16\0\0\0\0\x02\0\0\x7e\
\0\0\0\x16\0\0\0\x40\x02\0\0\x81\0\0\0\x16\0\0\0\x80\x02\0\0\x84\0\0\0\x16\0\0\
\0\xc0\x02\0\0\x87\0\0\0\x16\0\0\0\0\x03\0\0\x8a\0\0\0\x16\0\0\0\x40\x03\0\0\
\x8d\0\0\0\x16\0\0\0\x80\x03\0\0\x90\0\0\0\x16\0\0\0\xc0\x03\0\0\x98\0\0\0\x16\
\0\0\0\0\x04\0\0\x9b\0\0\0\x16\0\0\0\x40\x04\0\0\x9e\0\0\0\x16\0\0\0\x80\x04\0\
\0\xa4\0\0\0\x16\0\0\0\xc0\x04\0\0\xa7\0\0\0\x16\0\0\0\0\x05\0\0\xaa\0\0\0\0\0\
\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x03\0\0\0\xbc\0\0\0\x14\0\0\0\
\xc0\0\0\0\x01\0\0\x0c\x17\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x05\0\0\0\
\x0d\0\0\0\xd2\x02\0\0\0\0\0\x0e\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0b\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1b\0\0\0\x05\0\0\0\x0e\0\0\0\xda\x02\0\0\0\0\0\
\x0e\x1c\0\0\0\0\0\0\0\xed\x02\0\0\x02\0\0\x0f\0\0\0\0\x0d\0\0\0\0\0\0\0\x20\0\
\0\0\x13\0\0\0\0\0\0\0\x10\0\0\0\xf3\x02\0\0\x01\0\0\x0f\0\0\0\0\x1d\0\0\0\0\0\
\0\0\x0e\0\0\0\xfb\x02\0\0\x01\0\0\x0f\0\0\0\0\x1a\0\0\0\0\0\0\0\x0d\0\0\0\0\
\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\
\x76\x61\x6c\x75\x65\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\
\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x65\x76\x65\x6e\x74\0\x70\x69\x64\0\x70\
\x61\x74\x68\x5f\x6e\x61\x6d\x65\0\x63\x68\x61\x72\0\x68\x65\x61\x70\0\x72\x62\
\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\x33\0\x72\
\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\x38\0\
\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\x61\x78\
\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\x6c\x6f\x6e\
\x67\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x74\
\x72\x61\x63\x65\x5f\x6f\x70\x65\x6e\0\x6b\x70\x72\x6f\x62\x65\x2f\x64\x6f\x5f\
\x73\x79\x73\x5f\x6f\x70\x65\x6e\x61\x74\x32\0\x30\x3a\x31\x33\0\x2f\x68\x6f\
\x6d\x65\x2f\x6e\x69\x67\x65\x6c\x2f\x6f\x70\x65\x6e\x73\x6f\x75\x72\x63\x65\
\x2f\x62\x70\x66\x5f\x74\x65\x73\x74\x2f\x6b\x70\x72\x6f\x62\x65\x2e\x62\x70\
\x66\x2e\x63\0\x09\x63\x68\x61\x72\x20\x2a\x70\x61\x74\x68\x6e\x61\x6d\x65\x20\
\x3d\x20\x28\x63\x68\x61\x72\x20\x2a\x29\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\
\x41\x52\x4d\x32\x28\x63\x74\x78\x29\x3b\0\x30\x3a\x31\x34\0\x09\x63\x6f\x6e\
\x73\x74\x20\x69\x6e\x74\x20\x64\x69\x72\x66\x64\x20\x3d\x20\x50\x54\x5f\x52\
\x45\x47\x53\x5f\x50\x41\x52\x4d\x31\x28\x63\x74\x78\x29\x3b\0\x09\x69\x6e\x74\
\x20\x7a\x65\x72\x6f\x20\x3d\x20\x30\x3b\0\x09\x65\x20\x3d\x20\x62\x70\x66\x5f\
\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x68\x65\
\x61\x70\x2c\x20\x26\x7a\x65\x72\x6f\x29\x3b\0\x09\x69\x66\x20\x28\x21\x65\x29\
\x20\x7b\0\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x20\x28\x20\x22\x62\
\x70\x66\x20\x6d\x61\x70\x20\x66\x61\x69\x6c\x5c\x6e\x22\x29\x3b\0\x09\x65\x2d\
\x3e\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\
\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\
\x32\x3b\0\x09\x62\x70\x66\x5f\x70\x72\x6f\x62\x65\x5f\x72\x65\x61\x64\x5f\x73\
\x74\x72\x28\x26\x65\x2d\x3e\x70\x61\x74\x68\x5f\x6e\x61\x6d\x65\x2c\x20\x73\
\x69\x7a\x65\x6f\x66\x20\x28\x65\x2d\x3e\x70\x61\x74\x68\x5f\x6e\x61\x6d\x65\
\x29\x2c\x20\x70\x61\x74\x68\x6e\x61\x6d\x65\x29\x3b\0\x09\x62\x70\x66\x5f\x72\
\x69\x6e\x67\x62\x75\x66\x5f\x6f\x75\x74\x70\x75\x74\x28\x26\x72\x62\x2c\x20\
\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\x65\x29\x2c\x20\x30\x29\x3b\0\x09\
\x63\x68\x61\x72\x20\x66\x6d\x74\x5b\x5d\x20\x3d\x20\x22\x40\x64\x69\x72\x66\
\x64\x3d\x27\x25\x64\x27\x20\x40\x70\x61\x74\x68\x6e\x61\x6d\x65\x3d\x27\x25\
\x73\x27\x22\x3b\0\x09\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\
\x74\x6b\x28\x66\x6d\x74\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x66\x6d\x74\x29\
\x2c\x20\x64\x69\x72\x66\x64\x2c\x20\x70\x61\x74\x68\x6e\x61\x6d\x65\x29\x3b\0\
\x7d\0\x4c\x49\x43\x45\x4e\x53\x45\0\x74\x72\x61\x63\x65\x5f\x6f\x70\x65\x6e\
\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\
\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\
\0\0\x14\0\0\0\x1c\x01\0\0\x30\x01\0\0\x2c\0\0\0\x08\0\0\0\xcb\0\0\0\x01\0\0\0\
\0\0\0\0\x18\0\0\0\x10\0\0\0\xcb\0\0\0\x11\0\0\0\0\0\0\0\xe6\0\0\0\x13\x01\0\0\
\x1b\xec\0\0\x08\0\0\0\xe6\0\0\0\x46\x01\0\0\x14\xe8\0\0\x18\0\0\0\xe6\0\0\0\
\x6d\x01\0\0\x06\xf4\0\0\x28\0\0\0\xe6\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\xe6\0\0\
\0\x7c\x01\0\0\x06\xf8\0\0\x50\0\0\0\xe6\0\0\0\xa4\x01\0\0\x06\xfc\0\0\x58\0\0\
\0\xe6\0\0\0\xaf\x01\0\0\x03\0\x01\0\x80\0\0\0\xe6\0\0\0\xd1\x01\0\0\x0b\x10\
\x01\0\x88\0\0\0\xe6\0\0\0\xd1\x01\0\0\x26\x10\x01\0\x90\0\0\0\xe6\0\0\0\xd1\
\x01\0\0\x09\x10\x01\0\x98\0\0\0\xe6\0\0\0\xfd\x01\0\0\x19\x14\x01\0\xa8\0\0\0\
\xe6\0\0\0\xfd\x01\0\0\x02\x14\x01\0\xc0\0\0\0\xe6\0\0\0\x42\x02\0\0\x02\x18\
\x01\0\xf0\0\0\0\xe6\0\0\0\x6e\x02\0\0\x07\x1c\x01\0\x58\x01\0\0\xe6\0\0\0\0\0\
\0\0\0\0\0\0\x60\x01\0\0\xe6\0\0\0\x9a\x02\0\0\x02\x24\x01\0\x80\x01\0\0\xe6\0\
\0\0\xd0\x02\0\0\x01\x30\x01\0\x10\0\0\0\xcb\0\0\0\x02\0\0\0\0\0\0\0\x15\0\0\0\
\xe1\0\0\0\0\0\0\0\x08\0\0\0\x15\0\0\0\x41\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x53\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xad\0\0\0\0\0\x02\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8c\0\0\0\0\0\x02\
\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\x05\0\0\0\0\0\0\0\0\0\
\x0e\0\0\0\0\0\0\0\0\0\0\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\0\0\0\x11\0\x03\0\0\0\0\0\0\0\
\0\0\x0d\0\0\0\0\0\0\0\x2d\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\
\x60\0\0\0\x11\0\x04\0\x20\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x32\0\0\0\x12\0\x02\
\0\0\0\0\0\0\0\0\0\x90\x01\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x01\0\0\0\x08\0\0\0\
\x58\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\
\x5c\x03\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\x68\x03\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\
\x80\x03\0\0\0\0\0\0\x0a\0\0\0\x06\0\0\0\x98\x03\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\
\x2c\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x50\0\
\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x70\0\0\0\0\
\0\0\0\0\0\0\0\x05\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x90\0\0\0\0\0\0\0\
\0\0\0\0\x05\0\0\0\xa0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\
\0\x05\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\x05\
\0\0\0\xe0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x10\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x20\
\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x30\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x40\
\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x5c\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x6c\
\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x47\x44\x45\x3d\x46\0\x2e\x74\x65\x78\x74\0\
\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x74\x72\x61\x63\x65\x5f\x6f\
\x70\x65\x6e\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x68\x65\
\x61\x70\0\x74\x72\x61\x63\x65\x5f\x6f\x70\x65\x6e\0\x2e\x6c\x6c\x76\x6d\x5f\
\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6b\x70\x72\x6f\
\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x72\x62\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\
\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x33\0\x2e\x72\
\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x64\x6f\x5f\x73\x79\x73\x5f\x6f\x70\x65\
\x6e\x61\x74\x32\0\x4c\x42\x42\x30\x5f\x32\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\
\x73\x74\x72\x31\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x97\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x90\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4b\0\0\0\x01\0\0\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd0\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x27\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xe0\x01\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x73\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\
\x02\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xb4\0\0\0\x01\0\0\0\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\x02\0\0\0\0\0\
\0\x1b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x7f\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x39\x02\0\0\0\0\0\0\xa3\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdc\x08\0\0\0\0\0\0\x7c\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6b\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x58\x0a\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\x0e\0\0\0\x07\0\0\0\
\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x93\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x60\x0b\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x7b\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x90\x0b\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x09\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x0b\
\0\0\0\0\0\0\x40\x01\0\0\0\0\0\0\x09\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\
\0\0\0\0\0\x3d\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x10\x0d\
\0\0\0\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x63\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x0d\0\0\0\0\0\0\xc3\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct kprobe_bpf *kprobe_bpf::open(const struct bpf_object_open_opts *opts) { return kprobe_bpf__open_opts(opts); }
struct kprobe_bpf *kprobe_bpf::open_and_load() { return kprobe_bpf__open_and_load(); }
int kprobe_bpf::load(struct kprobe_bpf *skel) { return kprobe_bpf__load(skel); }
int kprobe_bpf::attach(struct kprobe_bpf *skel) { return kprobe_bpf__attach(skel); }
void kprobe_bpf::detach(struct kprobe_bpf *skel) { kprobe_bpf__detach(skel); }
void kprobe_bpf::destroy(struct kprobe_bpf *skel) { kprobe_bpf__destroy(skel); }
const void *kprobe_bpf::elf_bytes(size_t *sz) { return kprobe_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
kprobe_bpf__assert(struct kprobe_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __KPROBE_BPF_SKEL_H__ */
