/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TRACEX5_BPF_SKEL_H__
#define __TRACEX5_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct tracex5_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *progs;
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *__seccomp_filter;
		struct bpf_program *bpf_func_SYS__NR_write;
		struct bpf_program *bpf_func_SYS__NR_read;
		struct bpf_program *bpf_func_SYS__NR_open;
	} progs;
	struct {
		struct bpf_link *__seccomp_filter;
		struct bpf_link *bpf_func_SYS__NR_write;
		struct bpf_link *bpf_func_SYS__NR_read;
		struct bpf_link *bpf_func_SYS__NR_open;
	} links;
	struct tracex5_bpf__rodata_str1_1 {
	} *rodata_str1_1;

#ifdef __cplusplus
	static inline struct tracex5_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct tracex5_bpf *open_and_load();
	static inline int load(struct tracex5_bpf *skel);
	static inline int attach(struct tracex5_bpf *skel);
	static inline void detach(struct tracex5_bpf *skel);
	static inline void destroy(struct tracex5_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
tracex5_bpf__destroy(struct tracex5_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
tracex5_bpf__create_skeleton(struct tracex5_bpf *obj);

static inline struct tracex5_bpf *
tracex5_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct tracex5_bpf *obj;
	int err;

	obj = (struct tracex5_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = tracex5_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	tracex5_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct tracex5_bpf *
tracex5_bpf__open(void)
{
	return tracex5_bpf__open_opts(NULL);
}

static inline int
tracex5_bpf__load(struct tracex5_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct tracex5_bpf *
tracex5_bpf__open_and_load(void)
{
	struct tracex5_bpf *obj;
	int err;

	obj = tracex5_bpf__open();
	if (!obj)
		return NULL;
	err = tracex5_bpf__load(obj);
	if (err) {
		tracex5_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
tracex5_bpf__attach(struct tracex5_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
tracex5_bpf__detach(struct tracex5_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *tracex5_bpf__elf_bytes(size_t *sz);

static inline int
tracex5_bpf__create_skeleton(struct tracex5_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "tracex5_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "progs";
	s->maps[0].map = &obj->maps.progs;

	s->maps[1].name = ".rodata.str1.1";
	s->maps[1].map = &obj->maps.rodata_str1_1;
	s->maps[1].mmaped = (void **)&obj->rodata_str1_1;

	/* programs */
	s->prog_cnt = 4;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "__seccomp_filter";
	s->progs[0].prog = &obj->progs.__seccomp_filter;
	s->progs[0].link = &obj->links.__seccomp_filter;

	s->progs[1].name = "bpf_func_SYS__NR_write";
	s->progs[1].prog = &obj->progs.bpf_func_SYS__NR_write;
	s->progs[1].link = &obj->links.bpf_func_SYS__NR_write;

	s->progs[2].name = "bpf_func_SYS__NR_read";
	s->progs[2].prog = &obj->progs.bpf_func_SYS__NR_read;
	s->progs[2].link = &obj->links.bpf_func_SYS__NR_read;

	s->progs[3].name = "bpf_func_SYS__NR_open";
	s->progs[3].prog = &obj->progs.bpf_func_SYS__NR_open;
	s->progs[3].link = &obj->links.bpf_func_SYS__NR_open;

	s->data = (void *)tracex5_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *tracex5_bpf__elf_bytes(size_t *sz)
{
	*sz = 6848;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x80\x16\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x11\0\
\x10\0\x79\x13\x70\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x0c\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x13\x68\0\0\0\0\0\xbf\xa6\0\0\0\
\0\0\0\x07\x06\0\0\xc0\xff\xff\xff\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\x40\0\0\0\
\x85\0\0\0\x04\0\0\0\x79\x61\x20\0\0\0\0\0\x15\x01\x18\0\0\0\0\0\xb7\x01\0\0\0\
\0\0\0\x73\x1a\xbe\xff\0\0\0\0\xb7\x01\0\0\x29\x0a\0\0\x6b\x1a\xbc\xff\0\0\0\0\
\xb7\x01\0\0\x65\x3d\x25\x64\x63\x1a\xb8\xff\0\0\0\0\x18\x01\0\0\x3d\x25\x70\
\x2c\0\0\0\0\x20\x73\x69\x7a\x7b\x1a\xb0\xff\0\0\0\0\x18\x01\0\0\x3d\x25\x64\
\x2c\0\0\0\0\x20\x62\x75\x66\x7b\x1a\xa8\xff\0\0\0\0\x18\x01\0\0\x77\x72\x69\
\x74\0\0\0\0\x65\x28\x66\x64\x7b\x1a\xa0\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\
\x01\0\0\xc0\xff\xff\xff\x79\x15\x20\0\0\0\0\0\x79\x13\x10\0\0\0\0\0\x79\x14\
\x18\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xa0\xff\xff\xff\xb7\x02\0\0\x1f\
\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x13\x68\0\0\
\0\0\0\xbf\xa6\0\0\0\0\0\0\x07\x06\0\0\xc0\xff\xff\xff\xbf\x61\0\0\0\0\0\0\xb7\
\x02\0\0\x40\0\0\0\x85\0\0\0\x04\0\0\0\x79\x61\x20\0\0\0\0\0\x15\x01\x1a\0\0\0\
\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xc0\xff\xff\xff\x79\x11\x20\0\0\0\0\0\x25\
\x01\x16\0\0\x04\0\0\xb7\x01\0\0\x0a\0\0\0\x6b\x1a\xbc\xff\0\0\0\0\xb7\x01\0\0\
\x3d\x25\x64\x29\x63\x1a\xb8\xff\0\0\0\0\x18\x01\0\0\x25\x70\x2c\x20\0\0\0\0\
\x73\x69\x7a\x65\x7b\x1a\xb0\xff\0\0\0\0\x18\x01\0\0\x25\x64\x2c\x20\0\0\0\0\
\x62\x75\x66\x3d\x7b\x1a\xa8\xff\0\0\0\0\x18\x01\0\0\x72\x65\x61\x64\0\0\0\0\
\x28\x66\x64\x3d\x7b\x1a\xa0\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xc0\
\xff\xff\xff\x79\x15\x20\0\0\0\0\0\x79\x13\x10\0\0\0\0\0\x79\x14\x18\0\0\0\0\0\
\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xa0\xff\xff\xff\xb7\x02\0\0\x1e\0\0\0\x85\0\0\
\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x13\x68\0\0\0\0\0\xbf\xa6\
\0\0\0\0\0\0\x07\x06\0\0\xc0\xff\xff\xff\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\x40\0\
\0\0\x85\0\0\0\x04\0\0\0\xb7\x01\0\0\x0a\0\0\0\x6b\x1a\xbc\xff\0\0\0\0\xb7\x01\
\0\0\x3d\x25\x70\x29\x63\x1a\xb8\xff\0\0\0\0\x18\x01\0\0\x25\x64\x2c\x20\0\0\0\
\0\x70\x61\x74\x68\x7b\x1a\xb0\xff\0\0\0\0\x18\x01\0\0\x6f\x70\x65\x6e\0\0\0\0\
\x28\x66\x64\x3d\x7b\x1a\xa8\xff\0\0\0\0\x79\x63\x10\0\0\0\0\0\x79\x64\x18\0\0\
\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xa8\xff\xff\xff\xb7\x02\0\0\x16\0\0\0\
\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\
\x42\x53\x44\x2f\x47\x50\x4c\0\x77\x72\x69\x74\x65\x28\x66\x64\x3d\x25\x64\x2c\
\x20\x62\x75\x66\x3d\x25\x70\x2c\x20\x73\x69\x7a\x65\x3d\x25\x64\x29\x0a\0\x72\
\x65\x61\x64\x28\x66\x64\x3d\x25\x64\x2c\x20\x62\x75\x66\x3d\x25\x70\x2c\x20\
\x73\x69\x7a\x65\x3d\x25\x64\x29\x0a\0\x6f\x70\x65\x6e\x28\x66\x64\x3d\x25\x64\
\x2c\x20\x70\x61\x74\x68\x3d\x25\x70\x29\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x64\x03\0\0\
\x64\x03\0\0\xed\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x03\0\0\0\x05\0\
\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\x19\0\0\
\0\0\0\0\x08\x09\0\0\0\x1d\0\0\0\0\0\0\x08\x0a\0\0\0\x23\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x30\0\0\0\x01\0\0\0\0\0\0\0\x35\0\
\0\0\x05\0\0\0\x40\0\0\0\x41\0\0\0\x07\0\0\0\x80\0\0\0\x45\0\0\0\x07\0\0\0\xc0\
\0\0\0\x4b\0\0\0\0\0\0\x0e\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0e\0\0\0\x51\
\0\0\0\x15\0\0\x04\xa8\0\0\0\x59\0\0\0\x0f\0\0\0\0\0\0\0\x5d\0\0\0\x0f\0\0\0\
\x40\0\0\0\x61\0\0\0\x0f\0\0\0\x80\0\0\0\x65\0\0\0\x0f\0\0\0\xc0\0\0\0\x69\0\0\
\0\x0f\0\0\0\0\x01\0\0\x6c\0\0\0\x0f\0\0\0\x40\x01\0\0\x6f\0\0\0\x0f\0\0\0\x80\
\x01\0\0\x73\0\0\0\x0f\0\0\0\xc0\x01\0\0\x77\0\0\0\x0f\0\0\0\0\x02\0\0\x7a\0\0\
\0\x0f\0\0\0\x40\x02\0\0\x7d\0\0\0\x0f\0\0\0\x80\x02\0\0\x80\0\0\0\x0f\0\0\0\
\xc0\x02\0\0\x83\0\0\0\x0f\0\0\0\0\x03\0\0\x86\0\0\0\x0f\0\0\0\x40\x03\0\0\x89\
\0\0\0\x0f\0\0\0\x80\x03\0\0\x8c\0\0\0\x0f\0\0\0\xc0\x03\0\0\x94\0\0\0\x0f\0\0\
\0\0\x04\0\0\x97\0\0\0\x0f\0\0\0\x40\x04\0\0\x9a\0\0\0\x0f\0\0\0\x80\x04\0\0\
\xa0\0\0\0\x0f\0\0\0\xc0\x04\0\0\xa3\0\0\0\x0f\0\0\0\0\x05\0\0\xa6\0\0\0\0\0\0\
\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xb8\0\0\0\x0d\0\0\0\xbc\
\0\0\0\x01\0\0\x0c\x10\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xb8\0\0\0\x0d\0\0\0\
\xb8\x01\0\0\x01\0\0\x0c\x12\0\0\0\x27\x02\0\0\x04\0\0\x04\x40\0\0\0\x34\x02\0\
\0\x02\0\0\0\0\0\0\0\x37\x02\0\0\x09\0\0\0\x20\0\0\0\x3c\x02\0\0\x15\0\0\0\x40\
\0\0\0\x50\x02\0\0\x17\0\0\0\x80\0\0\0\x55\x02\0\0\0\0\0\x08\x16\0\0\0\x5b\x02\
\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x04\0\0\
\0\x06\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xb8\0\0\0\x0d\0\0\0\x24\x03\0\0\x01\
\0\0\x0c\x18\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xb8\0\0\0\x0d\0\0\0\x41\x04\0\
\0\x01\0\0\x0c\x1a\0\0\0\xd2\x04\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\
\0\0\x03\0\0\0\0\x1c\0\0\0\x04\0\0\0\x0d\0\0\0\xd7\x04\0\0\0\0\0\x0e\x1d\0\0\0\
\x01\0\0\0\xdf\x04\0\0\x01\0\0\x0f\0\0\0\0\x0c\0\0\0\0\0\0\0\x20\0\0\0\xe5\x04\
\0\0\x01\0\0\x0f\0\0\0\0\x1e\0\0\0\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\
\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\x33\
\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\
\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\
\x76\x61\x6c\x75\x65\0\x70\x72\x6f\x67\x73\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\
\x31\x35\0\x72\x31\x34\0\x72\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\
\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\
\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\
\x67\x73\0\x73\x70\0\x73\x73\0\x6c\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x5f\x5f\x73\x65\x63\x63\x6f\x6d\x70\x5f\
\x66\x69\x6c\x74\x65\x72\0\x6b\x70\x72\x6f\x62\x65\x2f\x5f\x5f\x73\x65\x63\x63\
\x6f\x6d\x70\x5f\x66\x69\x6c\x74\x65\x72\0\x30\x3a\x31\x34\0\x2f\x68\x6f\x6d\
\x65\x2f\x6e\x69\x67\x65\x6c\x2f\x6f\x70\x65\x6e\x73\x6f\x75\x72\x63\x65\x2f\
\x65\x62\x70\x66\x5f\x74\x65\x73\x74\x32\x2f\x74\x72\x61\x63\x65\x78\x35\x2e\
\x62\x70\x66\x2e\x63\0\x20\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\
\x45\x28\x5f\x5f\x73\x65\x63\x63\x6f\x6d\x70\x5f\x66\x69\x6c\x74\x65\x72\x2c\
\x20\x69\x6e\x74\x20\x74\x68\x69\x73\x5f\x73\x79\x73\x63\x61\x6c\x6c\x2c\x20\
\x63\x6f\x6e\x73\x74\x20\x73\x74\x72\x75\x63\x74\x20\x73\x65\x63\x63\x6f\x6d\
\x70\x5f\x64\x61\x74\x61\x20\x2a\x73\x64\x2c\x20\x63\x6f\x6e\x73\x74\x20\x62\
\x6f\x6f\x6c\x20\x72\x65\x63\x68\x65\x63\x6b\x5f\x61\x66\x74\x65\x72\x5f\x74\
\x72\x61\x63\x65\x29\0\x09\x62\x70\x66\x5f\x74\x61\x69\x6c\x5f\x63\x61\x6c\x6c\
\x28\x63\x74\x78\x2c\x20\x26\x70\x72\x6f\x67\x73\x2c\x20\x74\x68\x69\x73\x5f\
\x73\x79\x73\x63\x61\x6c\x6c\x29\x3b\0\x62\x70\x66\x5f\x66\x75\x6e\x63\x5f\x53\
\x59\x53\x5f\x5f\x4e\x52\x5f\x77\x72\x69\x74\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\
\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x77\x72\x69\x74\x65\0\x30\x3a\x31\x33\0\x09\
\x62\x70\x66\x5f\x70\x72\x6f\x62\x65\x5f\x72\x65\x61\x64\x28\x26\x73\x64\x2c\
\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x64\x29\x2c\x20\x28\x76\x6f\x69\x64\x20\
\x2a\x29\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\x4d\x32\x28\x63\x74\x78\
\x29\x29\x3b\0\x73\x65\x63\x63\x6f\x6d\x70\x5f\x64\x61\x74\x61\0\x6e\x72\0\x61\
\x72\x63\x68\0\x69\x6e\x73\x74\x72\x75\x63\x74\x69\x6f\x6e\x5f\x70\x6f\x69\x6e\
\x74\x65\x72\0\x61\x72\x67\x73\0\x5f\x5f\x75\x36\x34\0\x6c\x6f\x6e\x67\x20\x6c\
\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x30\x3a\x33\
\x3a\x32\0\x09\x69\x66\x20\x28\x73\x64\x2e\x61\x72\x67\x73\x5b\x32\x5d\x20\x3e\
\x20\x30\x29\x20\x7b\0\x09\x09\x63\x68\x61\x72\x20\x66\x6d\x74\x5b\x5d\x20\x3d\
\x20\x22\x77\x72\x69\x74\x65\x28\x66\x64\x3d\x25\x64\x2c\x20\x62\x75\x66\x3d\
\x25\x70\x2c\x20\x73\x69\x7a\x65\x3d\x25\x64\x29\x5c\x6e\x22\x3b\0\x09\x09\x20\
\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\x6b\x28\x66\x6d\
\x74\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x66\x6d\x74\x29\x2c\x20\x73\x64\x2e\
\x61\x72\x67\x73\x5b\x30\x5d\x2c\x20\x73\x64\x2e\x61\x72\x67\x73\x5b\x31\x5d\
\x2c\x20\x73\x64\x2e\x61\x72\x67\x73\x5b\x32\x5d\x29\x3b\0\x30\x3a\x33\x3a\x30\
\0\x30\x3a\x33\x3a\x31\0\x09\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x62\x70\
\x66\x5f\x66\x75\x6e\x63\x5f\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x72\x65\x61\x64\0\
\x6b\x70\x72\x6f\x62\x65\x2f\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x72\x65\x61\x64\0\
\x09\x20\x62\x70\x66\x5f\x70\x72\x6f\x62\x65\x5f\x72\x65\x61\x64\x28\x26\x73\
\x64\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x64\x29\x2c\x20\x28\x76\x6f\x69\
\x64\x20\x2a\x29\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\x4d\x32\x28\x63\
\x74\x78\x29\x29\x3b\0\x09\x20\x69\x66\x20\x28\x73\x64\x2e\x61\x72\x67\x73\x5b\
\x32\x5d\x20\x3e\x20\x30\x20\x26\x26\x20\x73\x64\x2e\x61\x72\x67\x73\x5b\x32\
\x5d\x20\x3c\x3d\x20\x31\x30\x32\x34\x29\x20\x7b\0\x09\x09\x63\x68\x61\x72\x20\
\x66\x6d\x74\x5b\x5d\x20\x3d\x20\x22\x72\x65\x61\x64\x28\x66\x64\x3d\x25\x64\
\x2c\x20\x62\x75\x66\x3d\x25\x70\x2c\x20\x73\x69\x7a\x65\x3d\x25\x64\x29\x5c\
\x6e\x22\x3b\0\x09\x09\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\
\x74\x6b\x28\x66\x6d\x74\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x66\x6d\x74\x29\
\x2c\x20\x73\x64\x2e\x61\x72\x67\x73\x5b\x30\x5d\x2c\x20\x73\x64\x2e\x61\x72\
\x67\x73\x5b\x31\x5d\x2c\x20\x73\x64\x2e\x61\x72\x67\x73\x5b\x32\x5d\x29\x3b\0\
\x09\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x62\x70\x66\x5f\x66\x75\x6e\x63\x5f\
\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x6f\x70\x65\x6e\0\x6b\x70\x72\x6f\x62\x65\x2f\
\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x6f\x70\x65\x6e\0\x09\x20\x63\x68\x61\x72\x20\
\x66\x6d\x74\x5b\x5d\x20\x3d\x20\x22\x6f\x70\x65\x6e\x28\x66\x64\x3d\x25\x64\
\x2c\x20\x70\x61\x74\x68\x3d\x25\x70\x29\x5c\x6e\x22\x3b\0\x09\x20\x62\x70\x66\
\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\x6b\x28\x66\x6d\x74\x2c\x20\
\x73\x69\x7a\x65\x6f\x66\x28\x66\x6d\x74\x29\x2c\x20\x73\x64\x2e\x61\x72\x67\
\x73\x5b\x30\x5d\x2c\x20\x73\x64\x2e\x61\x72\x67\x73\x5b\x31\x5d\x29\x3b\0\x63\
\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x44\0\0\0\x44\0\0\0\x84\x02\
\0\0\xc8\x02\0\0\x14\x01\0\0\x08\0\0\0\xcd\0\0\0\x01\0\0\0\0\0\0\0\x11\0\0\0\
\xcf\x01\0\0\x01\0\0\0\0\0\0\0\x13\0\0\0\x3a\x03\0\0\x01\0\0\0\0\0\0\0\x19\0\0\
\0\x57\x04\0\0\x01\0\0\0\0\0\0\0\x1b\0\0\0\x10\0\0\0\xcd\0\0\0\x03\0\0\0\0\0\0\
\0\xea\0\0\0\x1a\x01\0\0\x06\x58\0\0\x08\0\0\0\xea\0\0\0\x8d\x01\0\0\x02\x70\0\
\0\x20\0\0\0\xea\0\0\0\x1a\x01\0\0\x06\x58\0\0\xcf\x01\0\0\x0c\0\0\0\0\0\0\0\
\xea\0\0\0\xe9\x01\0\0\x2a\xa4\0\0\x10\0\0\0\xea\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\
\0\xea\0\0\0\xe9\x01\0\0\x02\xa4\0\0\x30\0\0\0\xea\0\0\0\x78\x02\0\0\x06\xa8\0\
\0\x38\0\0\0\xea\0\0\0\x78\x02\0\0\x06\xa8\0\0\x48\0\0\0\xea\0\0\0\x8f\x02\0\0\
\x08\xac\0\0\xc8\0\0\0\xea\0\0\0\xc1\x02\0\0\x3f\xb0\0\0\xd0\0\0\0\xea\0\0\0\
\xc1\x02\0\0\x27\xb0\0\0\xd8\0\0\0\xea\0\0\0\xc1\x02\0\0\x33\xb0\0\0\xe8\0\0\0\
\xea\0\0\0\x8f\x02\0\0\x08\xac\0\0\xf0\0\0\0\xea\0\0\0\xc1\x02\0\0\x04\xb0\0\0\
\0\x01\0\0\xea\0\0\0\x18\x03\0\0\x03\xb8\0\0\x3a\x03\0\0\x0e\0\0\0\0\0\0\0\xea\
\0\0\0\x4e\x03\0\0\x2b\xd8\0\0\x10\0\0\0\xea\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\
\xea\0\0\0\x4e\x03\0\0\x03\xd8\0\0\x30\0\0\0\xea\0\0\0\x8d\x03\0\0\x07\xdc\0\0\
\x38\0\0\0\xea\0\0\0\x8d\x03\0\0\x16\xdc\0\0\x48\0\0\0\xea\0\0\0\x8d\x03\0\0\
\x19\xdc\0\0\x58\0\0\0\xea\0\0\0\x8d\x03\0\0\x07\xdc\0\0\x68\0\0\0\xea\0\0\0\
\xbb\x03\0\0\x08\xe0\0\0\xd8\0\0\0\xea\0\0\0\xec\x03\0\0\x3e\xe4\0\0\xe0\0\0\0\
\xea\0\0\0\xec\x03\0\0\x26\xe4\0\0\xe8\0\0\0\xea\0\0\0\xec\x03\0\0\x32\xe4\0\0\
\xf8\0\0\0\xea\0\0\0\xbb\x03\0\0\x08\xe0\0\0\0\x01\0\0\xea\0\0\0\xec\x03\0\0\
\x03\xe4\0\0\x10\x01\0\0\xea\0\0\0\x36\x04\0\0\x02\xec\0\0\x57\x04\0\0\x09\0\0\
\0\0\0\0\0\xea\0\0\0\x4e\x03\0\0\x2b\x0c\x01\0\x10\0\0\0\xea\0\0\0\0\0\0\0\0\0\
\0\0\x18\0\0\0\xea\0\0\0\x4e\x03\0\0\x03\x0c\x01\0\x38\0\0\0\xea\0\0\0\x6b\x04\
\0\0\x08\x10\x01\0\x80\0\0\0\xea\0\0\0\x94\x04\0\0\x26\x14\x01\0\x88\0\0\0\xea\
\0\0\0\x94\x04\0\0\x32\x14\x01\0\x98\0\0\0\xea\0\0\0\0\0\0\0\0\0\0\0\xa0\0\0\0\
\xea\0\0\0\x94\x04\0\0\x03\x14\x01\0\xb0\0\0\0\xea\0\0\0\x36\x04\0\0\x02\x18\
\x01\0\x10\0\0\0\xcd\0\0\0\x01\0\0\0\0\0\0\0\x0e\0\0\0\xe5\0\0\0\0\0\0\0\xcf\
\x01\0\0\x05\0\0\0\0\0\0\0\x0e\0\0\0\xe4\x01\0\0\0\0\0\0\x30\0\0\0\x14\0\0\0\
\x72\x02\0\0\0\0\0\0\xc8\0\0\0\x14\0\0\0\x72\x02\0\0\0\0\0\0\xd0\0\0\0\x14\0\0\
\0\x0c\x03\0\0\0\0\0\0\xd8\0\0\0\x14\0\0\0\x12\x03\0\0\0\0\0\0\x3a\x03\0\0\x06\
\0\0\0\0\0\0\0\x0e\0\0\0\xe4\x01\0\0\0\0\0\0\x30\0\0\0\x14\0\0\0\x72\x02\0\0\0\
\0\0\0\x50\0\0\0\x14\0\0\0\x72\x02\0\0\0\0\0\0\xd8\0\0\0\x14\0\0\0\x72\x02\0\0\
\0\0\0\0\xe0\0\0\0\x14\0\0\0\x0c\x03\0\0\0\0\0\0\xe8\0\0\0\x14\0\0\0\x12\x03\0\
\0\0\0\0\0\x57\x04\0\0\x03\0\0\0\0\0\0\0\x0e\0\0\0\xe4\x01\0\0\0\0\0\0\x80\0\0\
\0\x14\0\0\0\x0c\x03\0\0\0\0\0\0\x88\0\0\0\x14\0\0\0\x12\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd2\0\0\0\x04\0\xf1\xff\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x01\0\0\0\0\x03\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x01\x01\0\0\0\0\x04\0\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf9\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\
\x0d\0\0\0\0\0\0\0\x2b\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x3c\
\0\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\xa8\0\0\0\x12\0\x04\0\0\0\
\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x74\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\x01\
\0\0\0\0\0\0\x1a\0\0\0\x11\0\x08\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\x01\0\0\0\x0d\0\0\0\x5c\x03\0\0\0\0\0\0\0\0\0\0\x0d\0\0\0\x74\x03\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\x2c\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x3c\0\0\0\0\0\0\
\0\0\0\0\0\x05\0\0\0\x4c\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x5c\0\0\0\0\0\0\0\0\0\
\0\0\x07\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xa8\0\0\0\0\0\0\0\0\0\0\0\x05\0\
\0\0\xb8\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xc8\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\
\xd8\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xe8\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xf8\0\
\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x08\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x18\x01\0\
\0\0\0\0\0\0\0\0\0\x05\0\0\0\x28\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x38\x01\0\0\
\0\0\0\0\0\0\0\0\x05\0\0\0\x48\x01\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x58\x01\0\0\0\
\0\0\0\0\0\0\0\x05\0\0\0\x70\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x80\x01\0\0\0\0\
\0\0\0\0\0\0\x06\0\0\0\x90\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xa0\x01\0\0\0\0\0\
\0\0\0\0\0\x06\0\0\0\xb0\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xc0\x01\0\0\0\0\0\0\
\0\0\0\0\x06\0\0\0\xd0\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xe0\x01\0\0\0\0\0\0\0\
\0\0\0\x06\0\0\0\xf0\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\
\0\x06\0\0\0\x10\x02\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x20\x02\0\0\0\0\0\0\0\0\0\0\
\x06\0\0\0\x30\x02\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x40\x02\0\0\0\0\0\0\0\0\0\0\
\x06\0\0\0\x58\x02\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x68\x02\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\x78\x02\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x88\x02\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\x98\x02\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\xa8\x02\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\xb8\x02\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\xc8\x02\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\xd8\x02\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\xf4\x02\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\x0c\x03\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x1c\x03\0\0\0\0\0\0\0\0\0\0\
\x05\0\0\0\x2c\x03\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x3c\x03\0\0\0\0\0\0\0\0\0\0\
\x05\0\0\0\x4c\x03\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x64\x03\0\0\0\0\0\0\0\0\0\0\
\x06\0\0\0\x74\x03\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x84\x03\0\0\0\0\0\0\0\0\0\0\
\x06\0\0\0\x94\x03\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xa4\x03\0\0\0\0\0\0\0\0\0\0\
\x06\0\0\0\xb4\x03\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xcc\x03\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\xdc\x03\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\xec\x03\0\0\0\0\0\0\0\0\0\0\
\x07\0\0\0\x0f\x12\x11\x10\x0e\x13\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x6d\x61\x70\x73\0\x70\x72\x6f\x67\x73\0\x2e\
\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x5f\x5f\x73\x65\x63\x63\x6f\x6d\x70\
\x5f\x66\x69\x6c\x74\x65\x72\0\x62\x70\x66\x5f\x66\x75\x6e\x63\x5f\x53\x59\x53\
\x5f\x5f\x4e\x52\x5f\x6f\x70\x65\x6e\0\x6b\x70\x72\x6f\x62\x65\x2f\x53\x59\x53\
\x5f\x5f\x4e\x52\x5f\x6f\x70\x65\x6e\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\
\x73\x69\x67\0\x62\x70\x66\x5f\x66\x75\x6e\x63\x5f\x53\x59\x53\x5f\x5f\x4e\x52\
\x5f\x77\x72\x69\x74\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x53\x59\x53\x5f\x5f\x4e\
\x52\x5f\x77\x72\x69\x74\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x62\x70\x66\x5f\
\x66\x75\x6e\x63\x5f\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x72\x65\x61\x64\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x53\x59\x53\x5f\x5f\x4e\x52\x5f\x72\x65\x61\x64\0\x74\x72\
\x61\x63\x65\x78\x35\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\
\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\
\x45\x4e\x53\x45\0\x4c\x42\x42\x32\x5f\x33\0\x4c\x42\x42\x31\x5f\x32\0\x2e\x72\
\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x24\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\
\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8b\
\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x10\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbe\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x52\0\0\0\x01\0\0\0\x06\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x02\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x60\x03\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x0f\x01\0\0\x01\0\0\0\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x6d\x03\0\0\0\0\0\0\x53\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x03\0\0\
\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xf4\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x03\0\0\0\0\0\0\x69\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\x0c\0\0\0\0\0\0\xfc\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\0\0\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x10\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\x10\0\0\0\
\x08\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x20\0\0\0\x09\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x98\x11\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x02\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf0\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xa8\x11\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x0b\0\0\0\x09\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xc8\x11\0\0\0\0\0\0\x90\x03\0\0\0\0\0\0\x0b\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x66\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\
\x58\x15\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xe0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5e\x15\0\0\0\0\
\0\0\x1e\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct tracex5_bpf *tracex5_bpf::open(const struct bpf_object_open_opts *opts) { return tracex5_bpf__open_opts(opts); }
struct tracex5_bpf *tracex5_bpf::open_and_load() { return tracex5_bpf__open_and_load(); }
int tracex5_bpf::load(struct tracex5_bpf *skel) { return tracex5_bpf__load(skel); }
int tracex5_bpf::attach(struct tracex5_bpf *skel) { return tracex5_bpf__attach(skel); }
void tracex5_bpf::detach(struct tracex5_bpf *skel) { tracex5_bpf__detach(skel); }
void tracex5_bpf::destroy(struct tracex5_bpf *skel) { tracex5_bpf__destroy(skel); }
const void *tracex5_bpf::elf_bytes(size_t *sz) { return tracex5_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
tracex5_bpf__assert(struct tracex5_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TRACEX5_BPF_SKEL_H__ */
